#Diccionario 2 de operadores en C++

def tokens2(operadores):
    dict2 = { '::': "resolucion de ambito",
              '.' : "seleccion de miembro",
              '->': "otra forma de seleccion de miembro",
              '[]': "subindice de matriz",
              '()': "llamada a funcion",
              '++': "incremento de postfijo",
              '--': "decremento de postfijo",
              'typeid': "nombre de tipo",
              'const_cast': "conversion de tipos constante",
              'dynamic_cast': "conversion de tipos dinamica",
              'reinterpret_cast': "conversion de tipos reinterpretada",
              'static_cast': "conversion de tipos estatica",
              'sizeof': "tamaÃ±o de objeto o tipo",
              '~': "complemento de uno",
              '!': "not logico",
              '-': "negacion unaria",
              '+': "suma unaria",
              '&': "direccion de o AND bit a bit",
              '*': "direccionamiento indirecto o multiplicacion",
              'new': "crear objeto",
              'delete': "destruir objeto",
              '.*' : "puntero a miembro",
              '->*': "otra forma de puntero a miembro",
              '/' : "division",
              '%' : "modulo",
              '<<': "desplazamiento a la izquierda",
              '>>': "desplazamiento a la derecha",
              '<' : "menor que",
              '>' : "mayor que",
              '<=': "menor o igual que",
              '>=': "mayor o igual que",
              '==': "igualdad",
              '!=': "desigualdad",
              '^' : "Or exclusivo bit a bit",
              '|' : "otro tipo de Or exclusivo",
              '&&': "Y logico",
              '||': "O logico",
              '?:': "condicional",
              '=': "asignacion",
              '*=': "asignacion y multiplicacion",
              '/=': "asignacion y division",
              '%=': "asignacion y modulo",
              '+=': "asignacion y suma",
              '-=': "asignacion y resta",
              '<<=': "asignacion y desplazamiento a la izquierda",
              '>>=': "asignacion y desplazamiento a la derecha",
              '&=' : "asignacion AND bit a bit",
              '|=' : "asignacion y OR inclusivo",
              '^=' : "otro tipo de asignacion y OR inclusivo",
              'throw' : "expresion throw",
              ',' : "coma"
    }
    if operadores in dict2.keys():
        return True
    else:
        return False
print(tokens2('whil'))